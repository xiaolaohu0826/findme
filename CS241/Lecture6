Tokens?
sub $3, $0, $3 = 15252315125
SUB, DOLLAR, NUMBER(3) ...

Need tokenizer
  Look for particular elements, finding the end of every words
  List of tokens -> listof instructions

Intermediate representation is internal(Classes? Objects? Lists?) Nobody cares

Symbol table:
  Label: important in assembly language, not machine language

Analysis(First pass)
Synthesis(second pass)
  0x24 loop:                        0x24 - 0x30 = -0x0c = -12
  0x24 add $3, $3, $1
  0x28 sub $1, $1, $2
  0x2c bne $1, $0, loop // replace with relative location : -3
  0x30 jre $31
  ...
  0x40 lis $8 
  0x44 .word loop       // replace the "loop" with location 0x24
  0x48 jr $8

Efficiency matters:
· Operation needed:
  · Insert
  · Lookup
  · Delete(no)
NO: Array of (string, integer) pairs
YES: Your language's built-in map type

Error checking
  $main:    // syntax
  addu $3, $3, incrementor    // semantic(addu, incrementor)
  % I forget, how do I do comments?       // lexical, syntax
  jr loop  // semantic

  loop: add $3, $3, $7
  sub $1, $2
  bn~e $1, $0, loop : loopend              // lexical, syntax(bn~e, :loopend)
  jr $31

  loop: add $3, $3, $3  // semantic(repeated label)
  subu $1, $1, $2  // semantic
  beq $1, $0, $main  // syntax

  // logic! (not your job)

More subtle errors

  lw $3, 32768($30)
  bne $3, $0, notzero
  ... [40000 instructions]
  notzero: ...
  // restriction of machine code, cannot jump 40000 instructions

Useless error message:
  ERROR: Something happen. All your base are belong to dead memes

Useful error message:
  ERROR: Line 2: Unknown instruction "addu"

A little bit about bits
  Remember: Everything is context.
  Useful to treat an instruction as an int
  But don't output it in decimal ASCII!
  or output one ASCII symbol "1" or "0" per bit!
  Make sure you know how to output raw bits.

How to write an assembler?
  Slowly
  Keep backups of anything that works. Consider learning Mercurial or (ugh) git
  One step at a time: Make a printer for your iR
  Test simple features before complicated one
  Fear not the xxd, for it may be your rescuer
  
formal language theory
  Unambiguous
    Communicate

Set theory
  - Alphabet(symbol set)
  - Word/token(lexicon)
  - Sentence
  Sequence of words
  - Language
  set of sentences
  
  ø(a|b|c|d|...|z)*
  // ø,øa,øz,øaa, ..., øzz

  Aleen star: reprat ø or more times
  // a,b, ..., z, aa, ab, ..., az, ba, ..., bz, ..., (a, ..., zz, aaa)...
  
  [a-zA-ZØ-9][a-zA-ZØ-9]*   // [a-zA-ZØ-9]+
  
  Language classes:
  - Finite
  - Regular
  - Context-free
  - Context-sensitive

  Aleen star: reprat ø or more times
