Jan 18th

sw $1, -4($30)
sw $2, -8($30)
lis $1
.word 8
sub $30, $30, $1

...
lis $2
.word SumOneToN
jalr $2 (return back here after finishing SumOneToN)
...

lis $1
.word 8
add $30, $30, $1
lw $1, -4($30)
lw $2, -8($30)

----------------------------------------------------------------------------------------------------------------
Overview
· Input to an assembler
  · Sequence of bits...
  · ... to be interpreted as ASCII bytes
  · ... to be grouped into words
  · ... to be grouped into instructions
· Output to an assembler
  · Sequence of bits
  · ... to be interpreted (by the CPU) as machine code instructions
  · ... equivalent to the assembly code instructions
  
  High-level language program(ASCII) -> Compiler (Unix: cc) -> Assembly language program(ASCII) 
  (接上行)-> Assembler (cs241-binasm, Unix: as, A1: You, A3+A4: Yours) -> Machine language program(binary)
  
  Assembly language program(ASCII) -> Pass 1 { -> Symbol table            } -> Pass 2 -> Machine language program(binary)
                                             [ -> Internal representation }
  Two passes?
  loop:
    beq $1, $2, skip
    ...
  
  skip:
    add $3, $3, $4
    bne $3, $0, loop
  
  how to access "loop" from skip?
  
  · Informal description: see website
    · MIPS assembly language reference
    · Imprecise, e.g.:
      · lis $4
      · add $1, $2, $3
      · sub $3, $0, $3
  · Formal description: later
  
Label: can only define a label once, cannot redefine.
Labels record locations
Label itself does not occupy space, and not machine code
  
Syntax:
  · Form/structure of code
  · e.g.: "add" is followed by whitespace, which is followed by $, which is followed by a number ...
Semantics
  · Meaning of code
  · Assembler's job is to preserve:
    Machine code semantics = assembly code semantics
Locations and labels:
· "Where am I" necessary formeaning (beq)
· Labels: Name a location, part of syntax, affact 

· First pass: 
  Sequence of characters -> sequence of tokens -> sequence of instructions in internal format + symbol table
  · Tokens?
    sub $3, $0, $3 = 7475622#%!@^%@#^#@$
    sub $3, $0, $3 -> SUB, DOLLAR, NUMBER(3), COMMA, DOLLAR, NUMBER(0), COMMA, DOLLAR, NUMBER(3)
  Need tokenizer?
  
  (not a good example in class)


Intermediate representation
  list of tokens -> list of instructions
  Labels meaningful in assembly, not in machine code
    · In phase 1: Keep table label -> location
    · In phase 2: Replace labels in instructions with locations
    
  IR:
  (sw, ...)
  ...
  (opcode)(.word, SumOneToN{can be written in 0!}, ...)
  | 
  ->(opcode) (.word, 0, ...)  // in other words
  (beq, SumOneToN)... // relative
  (jr, $31)
  
  Symbol Table:
  SumOneToN -> 0
  
  
  
  
  
  
  
  
  
  
  
